- 웹 클라이언트 라이브러리
1. requests
파이썬에서 HTTP 요청을 보내고 응답을 처리하기 위한 라이브러리

: 간결하고 사용하기 쉬운 API -> HTTP 요청을 보내고 응답을 처리하는 것을 쉽게 만들어준다. GET, POST, PUT, DELETE 등의 다양한 메서드를 지원한다.
: 파라미터 전달 -> requests를 사용하여 URL에 쿼리 문자열 형태로 파라미터를 전달할 수 있다.

requests.get(url, params={'key':'value'})
: 요청 헤더 설정 -> requests를 사용하여 요청 헤더에 필요한 정보(인증, 권한, 사용자 에이전트(User-Agent) 등)을 추가할 수 있다.
: 응답 처리 -> request로 받은 응답 객체(Response Object)에서 상태 코드(status code), 헤더(header), 본문(body)등의 정보에 접근할 수 있다.
: 세션 관리 : requests.Session 클래스를 사용하여 세션을 유지하고, 요청 간의 쿠키와 같은 정보를 공유할 수 있다.
: 파일 업로드 및 다운로드 -> multipart/form-data 형식으로 파일을 업로드하거나 바이너리 데이터를 다운로드 하는 등의 작업을 할 수 있다.
: HTTPS 지원과 SSL 인증서 검증 -> requests는 HTTPS 프로토콜을 지원하며, SSL 인증서 검증 기능도 제공한다.

2. urllib
파이썬 표준 라이브러리, URL 작업과 관련된 다양한 모듈을 제공한다.
urllib.request 모듈은 HTTP 요청을 보내고 응답을 처리하는 기능을 제공한다.
urllib.parse 모듈은 URL 구문 분석 및 조작에 사용된다.

1) urllib.request
: urlopen() 함수를 사용하여 URL에 대한 GET 요청을 보낼 수 있다.
: Request 클래스를 사용하여 더 많은 컨트롤, 구성 옵션 등을 설정할 수 있다.
: 응답 객체는 파일 객체와 유사한 인터페이스를 가지며, 상태 코드, 헤더, 보눔ㄴ 등의 정보에 접근할 수 있다.

2) urllib.parse 모듈
: urlparse() 함수를 사용하여 URL 문자열을 구성요소(호스트, 스킴, 경로 등)로 분석할 수 있다. // URL과 관련된 친구들을 뽑아온다.
: urlunparse() 함수를 사용하여 구성요소로부터 URL 문자열을 생성할 수 있다.
: 쿼리 문자열 파싱 및 조작 기능(parse_qs(), urlencode())도 제공한다.
